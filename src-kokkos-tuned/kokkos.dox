/**

\page pg_kokkos_specifics The Kokkos Version of CoMD

Requirements
============

The Kokkos version of CoMD required compiling with modern C++ compilers,
based on the same requirements for building the Kokkos library.
To that end, several changes were made in my of the existing source
code files to allow the C-code to compile under C++ compilers.

Kokkos and Classical MD
=======================

Like most classical MD codes, the computational work in a classical MD
tends to be highly concentrated in the force routine.  Hence, creating
an Kokkos version of CoMD consists mostly of finding a way to thread the
force routine and then dealing with any serial loops outside the force
routine that become a bottleneck.

This reference version is not intended to be highly optimized for any
particular platform.  Rather it is intended to expose threading targets
while remaining very similar in structure to the base (non-threaded)
release (src-mpi).  The following changes have been made with respect to
the base release.

   - To avoid a race condition, the force routines do not exploit
     symmetry (see \ref sec_force_race_condition)
   - The neighbor indices for each link cell are precomputed and 
     stored in a large array (LinkCell::nbrBoxes).  
   - Various embarrassingly parallel loops over atoms have been 
     decorated with Kokkos parallel_for lambdas.

Vendors and other partners are strongly encouraged to discuss the wealth
of further possible optimizations, including possible significant
algorithmic and data structure changes with the CoMD team
(exmatex-comd@llnl.gov).  In particular, the are a large number of
possible loop reordering strategies that could have significant impacts
on performance.


Race Conditions in MD Force Routines {#sec_force_race_condition}
================================================================ 

Classical MD force routines typically exploit the symmetry of pair
forces, (i.e., Fij = -Fji) by calculating the force on a pair of atoms
only once and adding a contribution to the total forces on both atom i
and atom j.  While this technique reduces the flop requirement of the
force routine by a factor of two. it also creates a race condition in
threaded code.  Two different threads may attempt to add to the forces
of the same atom at the same time, producing an incorrect result.

A variety of strategies are possible to eliminate the race condition in
MD force loops:


Abandoning Symmetry
-------------------

The simplest way to avoid this race condition is to abandon the symmetry
optimization.  If only one thread calculates the forces for any given
atom there can be no race condition.  This is the approach taken in this
reference implementation because it is very easy to write and
understand.  The disadvantage of this approach is the factor of two
performance hit and the fact that the performance may be very sensitive
to the order of loops, number of link cells on an MPI rank, etc.


Critical Sections and Atomic Updates 
------------------------------------

The race condition for force updates (and other quantities such as
energies and stresses) can be eliminated using critical or atomic
directives.  Because critical sections impose a severe serialization
bottleneck even for small thread counts this is not an effective strategy.
With proper hardware support it is possible that atomic updates could
prove effective, however we have not explored the use of Kokkos' atomic
operations.


Thread Private Arrays
---------------------

The force race condition can of course be eliminated by creating a
thread private work area in which to store partial forces.  The cost of
the reduction operation to sum the thread private data is negligible,
however the amount of memory required for duplicate data structures at
large thread counts is prohibitive.


Advanced Scheduling Algorithms
------------------------------

It is possible to drastically reduce the memory cost of thread private
work areas by shifting control of the thread scheduling from the OpenMP
run-time (done in the openmp version of CoMD) to the MD code, and only 
allocating private memory for the array elements a thread is scheduled 
to touch.  (See for example, Kunaseth, et al, 
http://dx.doi.org/10.1007/s11227-013-0915-x) The downside of this method 
is the significant extra coding required to set up the scheduling.

*/
