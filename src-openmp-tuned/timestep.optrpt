Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C++ Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 17.0.2.174 Build 20170213

Compiler options: -I/opt/cray/pe/libsci/16.11.1/INTEL/15.0/mic_knl/include -I/opt/cray/pe/mpt/7.5.5/gni/mpich-intel/16.0/include -I/opt/cray/rca/2.1.8_g6cd9a1b-3.1/include -I/opt/cray/alps/6.3.4-2.21/include -I/opt/cray/xpmem/2.1.1_gf9c9084-2.38/include -I/opt/cray/gni-headers/5.0.11-2.2/include -I/opt/cray/pe/pmi/5.0.11/include -I/opt/cray/ugni/6.0.15-2.2/include -I/opt/cray/udreg/2.3.2-7.54/include -I/opt/cray/wlm_detect/1.2.1-3.10/include -I/opt/cray/krca/2.1.3_g923f58b-2.244/include -I/opt/cray-hss-devel/8.0.0/include -xmic-avx512 -static -D__CRAYXC -D__CRAY_MIC_KNL -D__CRAYXT_COMPUTE_LINUX_TARGET -std=c++11 -qopenmp -xmic-avx512 -qopt-report=5 -c -o timestep.o -Wl,-T/opt/cray/pe/craype/2.5.9/bin/2.25.0.craype.ld

    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: false
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: timestep(SimFlat *, int, real_t)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (timestep(SimFlat *, int, real_t)) [1/6=16.7%] timestep.cpp(34,1)
  -> EXTERN: (37,7) profileStart(TimerHandle)
  -> INLINE: (38,7) advanceVelocity(SimFlat *, int, real_t) (isz = 101) (sz = 110)
  -> EXTERN: (39,7) profileStop(TimerHandle)
  -> EXTERN: (41,7) profileStart(TimerHandle)
  -> INLINE: (42,7) advancePosition(SimFlat *, int, real_t) (isz = 113) (sz = 122)
  -> EXTERN: (43,7) profileStop(TimerHandle)
  -> EXTERN: (45,7) profileStart(TimerHandle)
  -> INLINE: (46,7) redistributeAtoms(SimFlat *) (isz = 45) (sz = 50)
    -> EXTERN: (146,4) updateLinkCells(LinkCell *, AtomsSt *)
    -> EXTERN: (148,4) profileStart(TimerHandle)
    -> EXTERN: (149,4) haloExchange(HaloExchange *, void *)
    -> EXTERN: (150,4) profileStop(TimerHandle)
    -> EXTERN: (154,7) sortAtomsInCell(AtomsSt *, LinkCellSt *, int)
  -> EXTERN: (47,7) profileStop(TimerHandle)
  -> EXTERN: (49,7) profileStart(TimerHandle)
  -> INLINE: (50,7) computeForce(SimFlat *) (isz = 3) (sz = 8)
    -> INDIRECT-: (65,4)  (s_492_V$1f.0.2.7->pot_V$1d)->force_V$28
       [[ Unable to inline indirect callsite  <1>]]
  -> EXTERN: (51,7) profileStop(TimerHandle)
  -> EXTERN: (53,7) profileStart(TimerHandle)
  -> INLINE: (54,7) advanceVelocity(SimFlat *, int, real_t) (isz = 101) (sz = 110)
  -> EXTERN: (55,7) profileStop(TimerHandle)
  -> INLINE: (58,4) kineticEnergy(SimFlat *) (isz = 135) (sz = 140)
    -> EXTERN: (123,4) profileStart(TimerHandle)
    -> EXTERN: (124,4) addRealParallel(real_t *, real_t *, int)
    -> EXTERN: (125,4) profileStop(TimerHandle)


    Report from: OpenMP optimizations [openmp]

timestep.cpp(71:4-71:4):OMP:_Z8timestepP9SimFlatStid:  OpenMP DEFINED LOOP WAS PARALLELIZED
timestep.cpp(85:4-85:4):OMP:_Z8timestepP9SimFlatStid:  OpenMP DEFINED LOOP WAS PARALLELIZED
timestep.cpp(152:4-152:4):OMP:_Z8timestepP9SimFlatStid:  OpenMP DEFINED LOOP WAS PARALLELIZED
timestep.cpp(71:4-71:4):OMP:_Z8timestepP9SimFlatStid:  OpenMP DEFINED LOOP WAS PARALLELIZED
timestep.cpp(107:4-107:4):OMP:_Z8timestepP9SimFlatStid:  OpenMP DEFINED LOOP WAS PARALLELIZED

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at timestep.cpp(72,4) inlined into timestep.cpp(38,7)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at timestep.cpp(74,7) inlined into timestep.cpp(38,7)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between s->p[iOff][0] (76:10) and s->f_2[iOff] (78:10)
      remark #15346: vector dependence: assumed ANTI dependence between s->f_2[iOff] (78:10) and s->p[iOff][0] (76:10)
      remark #15346: vector dependence: assumed FLOW dependence between s->p[iOff][0] (76:10) and s->p[iOff][2] (78:10)
      remark #15346: vector dependence: assumed ANTI dependence between s->p[iOff][2] (78:10) and s->p[iOff][0] (76:10)
      remark #15346: vector dependence: assumed OUTPUT dependence between s->p[iOff][0] (76:10) and s->p[iOff][2] (78:10)
      remark #15346: vector dependence: assumed OUTPUT dependence between s->p[iOff][2] (78:10) and s->p[iOff][0] (76:10)
   LOOP END
LOOP END

LOOP BEGIN at timestep.cpp(72,4) inlined into timestep.cpp(54,7)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at timestep.cpp(74,7) inlined into timestep.cpp(54,7)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between s->p[iOff][0] (76:10) and s->f_2[iOff] (78:10)
      remark #15346: vector dependence: assumed ANTI dependence between s->f_2[iOff] (78:10) and s->p[iOff][0] (76:10)
      remark #15346: vector dependence: assumed FLOW dependence between s->p[iOff][0] (76:10) and s->p[iOff][2] (78:10)
      remark #15346: vector dependence: assumed ANTI dependence between s->p[iOff][2] (78:10) and s->p[iOff][0] (76:10)
      remark #15346: vector dependence: assumed OUTPUT dependence between s->p[iOff][0] (76:10) and s->p[iOff][2] (78:10)
      remark #15346: vector dependence: assumed OUTPUT dependence between s->p[iOff][2] (78:10) and s->p[iOff][0] (76:10)
   LOOP END
LOOP END

LOOP BEGIN at timestep.cpp(108,4) inlined into timestep.cpp(58,4)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at timestep.cpp(110,7) inlined into timestep.cpp(58,4)
   <Peeled loop for vectorization>
      remark #15389: vectorization support: reference U5_V->atoms->iSpecies[iOff] has unaligned access   [ timestep.cpp(112,25) ]
      remark #15389: vectorization support: reference U5_V->atoms->iSpecies[iOff] has unaligned access   [ timestep.cpp(112,25) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.235
      remark #15301: PEEL LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at timestep.cpp(110,7) inlined into timestep.cpp(58,4)
      remark #25084: Preprocess Loopnests: Moving Out Store    [ timestep.cpp(114,10) ]
      remark #15389: vectorization support: reference U5_V->atoms->iSpecies[iOff] has unaligned access   [ timestep.cpp(112,25) ]
      remark #15389: vectorization support: reference U5_V->atoms->iSpecies[iOff] has unaligned access   [ timestep.cpp(112,25) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15415: vectorization support: non-unit strided load was generated for the variable <U5_V->atoms->p[iOff][0]>, stride is 3   [ timestep.cpp(114,23) ]
      remark #15415: vectorization support: non-unit strided load was generated for the variable <U5_V->atoms->p[iOff][0]>, stride is 3   [ timestep.cpp(114,46) ]
      remark #15415: vectorization support: non-unit strided load was generated for the variable <U5_V->atoms->p[iOff][1]>, stride is 3   [ timestep.cpp(115,10) ]
      remark #15415: vectorization support: non-unit strided load was generated for the variable <U5_V->atoms->p[iOff][1]>, stride is 3   [ timestep.cpp(115,33) ]
      remark #15415: vectorization support: non-unit strided load was generated for the variable <U5_V->atoms->p[iOff][2]>, stride is 3   [ timestep.cpp(116,10) ]
      remark #15415: vectorization support: non-unit strided load was generated for the variable <U5_V->atoms->p[iOff][2]>, stride is 3   [ timestep.cpp(116,33) ]
      remark #15415: vectorization support: irregularly indexed load was generated for the variable <U5_V->species->mass[*(U5_V->atoms->iSpecies+iOff*4)]>, part of index is read from memory   [ timestep.cpp(113,31) ]
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.245
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15452: unmasked strided loads: 6 
      remark #15462: unmasked indexed (or gather) loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 50 
      remark #15477: vector cost: 17.870 
      remark #15478: estimated potential speedup: 2.540 
      remark #15486: divides: 1 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at timestep.cpp(110,7) inlined into timestep.cpp(58,4)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference U5_V->atoms->iSpecies[iOff] has unaligned access   [ timestep.cpp(112,25) ]
      remark #15389: vectorization support: reference U5_V->atoms->iSpecies[iOff] has unaligned access   [ timestep.cpp(112,25) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.235
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at timestep.cpp(35,4)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

LOOP BEGIN at timestep.cpp(86,4) inlined into timestep.cpp(42,7)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.   [ timestep.cpp(88,7) ]

   LOOP BEGIN at timestep.cpp(88,7) inlined into timestep.cpp(42,7)
      remark #15523: loop was not vectorized: loop control variable ii was found, but loop iteration count cannot be computed before executing the loop
   LOOP END
LOOP END

LOOP BEGIN at timestep.cpp(153,4) inlined into timestep.cpp(46,7)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

timestep.cpp(114,23):remark #34030: adjacent sparse (strided) loads optimized for speed. Details: stride { 24 }, types { F64-V512, F64-V512, F64-V512 }, number of elements { 8 }, select mask { 0x000000007 }.
timestep.cpp(34,1):remark #34051: REGISTER ALLOCATION : [_Z8timestepP9SimFlatStid] timestep.cpp:34

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   41[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm20 k1-k6]
        
    Routine temporaries
        Total         :     716
            Global    :     191
            Local     :     525
        Regenerable   :     241
        Spilled       :      22
        
    Routine stack
        Variables     :     208 bytes*
            Reads     :      28 [9.90e+00 ~ 0.1%]
            Writes    :      38 [4.82e+02 ~ 3.1%]
        Spills        :     208 bytes*
            Reads     :      60 [1.63e+02 ~ 1.0%]
            Writes    :      56 [2.10e+02 ~ 1.3%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: computeForce(SimFlat *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (computeForce(SimFlat *)) [2/6=33.3%] timestep.cpp(64,1)
  -> INDIRECT-: (65,4)  (s_492_V$1f.0.2->pot_V$1d)->force_V$28
     [[ Unable to inline indirect callsite  <1>]]


    Report from: Code generation optimizations [cg]

timestep.cpp(64,1):remark #34051: REGISTER ALLOCATION : [_Z12computeForceP9SimFlatSt] timestep.cpp:64

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    3[ rax rdx rdi]
        
    Routine temporaries
        Total         :      12
            Global    :       0
            Local     :      12
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: advanceVelocity(SimFlat *, int, real_t)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (advanceVelocity(SimFlat *, int, real_t)) timestep.cpp(70,1)

===========================================================================

Begin optimization report for: advancePosition(SimFlat *, int, real_t)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (advancePosition(SimFlat *, int, real_t)) timestep.cpp(84,1)

===========================================================================

Begin optimization report for: kineticEnergy(SimFlat *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (kineticEnergy(SimFlat *)) [5/6=83.3%] timestep.cpp(102,1)
  -> EXTERN: (123,4) profileStart(TimerHandle)
  -> EXTERN: (124,4) addRealParallel(real_t *, real_t *, int)
  -> EXTERN: (125,4) profileStop(TimerHandle)


    Report from: OpenMP optimizations [openmp]

timestep.cpp(107:4-107:4):OMP:_Z13kineticEnergyP9SimFlatSt:  OpenMP DEFINED LOOP WAS PARALLELIZED

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at timestep.cpp(108,4)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at timestep.cpp(110,7)
   <Peeled loop for vectorization>
      remark #15389: vectorization support: reference s->atoms->iSpecies[iOff] has unaligned access   [ timestep.cpp(112,25) ]
      remark #15389: vectorization support: reference s->atoms->iSpecies[iOff] has unaligned access   [ timestep.cpp(112,25) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.235
      remark #15301: PEEL LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at timestep.cpp(110,7)
      remark #25084: Preprocess Loopnests: Moving Out Store    [ timestep.cpp(114,10) ]
      remark #15389: vectorization support: reference s->atoms->iSpecies[iOff] has unaligned access   [ timestep.cpp(112,25) ]
      remark #15389: vectorization support: reference s->atoms->iSpecies[iOff] has unaligned access   [ timestep.cpp(112,25) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15415: vectorization support: non-unit strided load was generated for the variable <s->atoms->p[iOff][0]>, stride is 3   [ timestep.cpp(114,23) ]
      remark #15415: vectorization support: non-unit strided load was generated for the variable <s->atoms->p[iOff][0]>, stride is 3   [ timestep.cpp(114,46) ]
      remark #15415: vectorization support: non-unit strided load was generated for the variable <s->atoms->p[iOff][1]>, stride is 3   [ timestep.cpp(115,10) ]
      remark #15415: vectorization support: non-unit strided load was generated for the variable <s->atoms->p[iOff][1]>, stride is 3   [ timestep.cpp(115,33) ]
      remark #15415: vectorization support: non-unit strided load was generated for the variable <s->atoms->p[iOff][2]>, stride is 3   [ timestep.cpp(116,10) ]
      remark #15415: vectorization support: non-unit strided load was generated for the variable <s->atoms->p[iOff][2]>, stride is 3   [ timestep.cpp(116,33) ]
      remark #15415: vectorization support: irregularly indexed load was generated for the variable <s->species->mass[*(s->atoms->iSpecies+iOff*4)]>, part of index is read from memory   [ timestep.cpp(113,31) ]
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.245
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15452: unmasked strided loads: 6 
      remark #15462: unmasked indexed (or gather) loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 50 
      remark #15477: vector cost: 17.870 
      remark #15478: estimated potential speedup: 2.540 
      remark #15486: divides: 1 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at timestep.cpp(110,7)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference s->atoms->iSpecies[iOff] has unaligned access   [ timestep.cpp(112,25) ]
      remark #15389: vectorization support: reference s->atoms->iSpecies[iOff] has unaligned access   [ timestep.cpp(112,25) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.235
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

timestep.cpp(114,23):remark #34030: adjacent sparse (strided) loads optimized for speed. Details: stride { 24 }, types { F64-V512, F64-V512, F64-V512 }, number of elements { 8 }, select mask { 0x000000007 }.
timestep.cpp(102,1):remark #34051: REGISTER ALLOCATION : [_Z13kineticEnergyP9SimFlatSt] timestep.cpp:102

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   41[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm20 k1-k6]
        
    Routine temporaries
        Total         :     311
            Global    :      85
            Local     :     226
        Regenerable   :      82
        Spilled       :      11
        
    Routine stack
        Variables     :      76 bytes*
            Reads     :      11 [4.90e+00 ~ 0.1%]
            Writes    :      12 [3.15e+01 ~ 0.8%]
        Spills        :     120 bytes*
            Reads     :      27 [5.28e+01 ~ 1.4%]
            Writes    :      25 [3.34e+01 ~ 0.9%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: redistributeAtoms(SimFlat *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (redistributeAtoms(SimFlat *)) [6/6=100.0%] timestep.cpp(145,1)
  -> EXTERN: (146,4) updateLinkCells(LinkCell *, AtomsSt *)
  -> EXTERN: (148,4) profileStart(TimerHandle)
  -> EXTERN: (149,4) haloExchange(HaloExchange *, void *)
  -> EXTERN: (150,4) profileStop(TimerHandle)
  -> EXTERN: (154,7) sortAtomsInCell(AtomsSt *, LinkCellSt *, int)


    Report from: OpenMP optimizations [openmp]

timestep.cpp(152:4-152:4):OMP:_Z17redistributeAtomsP9SimFlatSt:  OpenMP DEFINED LOOP WAS PARALLELIZED

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]



Non-optimizable loops:


LOOP BEGIN at timestep.cpp(153,4)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

timestep.cpp(145,1):remark #34051: REGISTER ALLOCATION : [_Z17redistributeAtomsP9SimFlatSt] timestep.cpp:145

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   13[ rax rdx rcx rbx rbp rsi rdi r8-r13]
        
    Routine temporaries
        Total         :      95
            Global    :      14
            Local     :      81
        Regenerable   :      37
        Spilled       :       0
        
    Routine stack
        Variables     :      28 bytes*
            Reads     :       5 [1.00e+00 ~ 0.5%]
            Writes    :       6 [2.20e+01 ~ 10.5%]
        Spills        :      48 bytes*
            Reads     :      12 [6.00e+00 ~ 2.9%]
            Writes    :      12 [1.20e+01 ~ 5.7%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

    Report from: Interprocedural optimizations [ipo]

INLINING FOOTNOTES:

<1> The indirectly called function must be resolved to its targets before it 
can be inlined.  Consider compiling with -ipo or -prof-gen followed by 
-prof-use.

