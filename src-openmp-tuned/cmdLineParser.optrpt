Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C++ Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 17.0.2.174 Build 20170213

Compiler options: -I/opt/cray/pe/libsci/16.11.1/INTEL/15.0/mic_knl/include -I/opt/cray/pe/mpt/7.5.5/gni/mpich-intel/16.0/include -I/opt/cray/rca/2.1.8_g6cd9a1b-3.1/include -I/opt/cray/alps/6.3.4-2.21/include -I/opt/cray/xpmem/2.1.1_gf9c9084-2.38/include -I/opt/cray/gni-headers/5.0.11-2.2/include -I/opt/cray/pe/pmi/5.0.11/include -I/opt/cray/ugni/6.0.15-2.2/include -I/opt/cray/udreg/2.3.2-7.54/include -I/opt/cray/wlm_detect/1.2.1-3.10/include -I/opt/cray/krca/2.1.3_g923f58b-2.244/include -I/opt/cray-hss-devel/8.0.0/include -xmic-avx512 -static -D__CRAYXC -D__CRAY_MIC_KNL -D__CRAYXT_COMPUTE_LINUX_TARGET -std=c++11 -qopenmp -xmic-avx512 -qopt-report=5 -c -o cmdLineParser.o -Wl,-T/opt/cray/pe/craype/2.5.9/bin/2.25.0.craype.ld

    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: false
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: comdCalloc(size_t, size_t)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (comdCalloc(size_t, size_t)) memUtils.h(26,1)

===========================================================================

Begin optimization report for: dupString(const char *)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (dupString(const char *)) cmdLineParser.cpp(37,1)

===========================================================================

Begin optimization report for: myOptionAlloc(const char *, char, int, char, void *, int, const char *)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (myOptionAlloc(const char *, char, int, char, void *, int, const char *)) cmdLineParser.cpp(48,1)

===========================================================================

Begin optimization report for: myOptionFree(MyOption *)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (myOptionFree(MyOption *)) cmdLineParser.cpp(68,1)

===========================================================================

Begin optimization report for: findOption(MyOption *, unsigned char)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (findOption(MyOption *, unsigned char)) cmdLineParser.cpp(86,1)

===========================================================================

Begin optimization report for: addArg(const char *, char, int, char, void *, int, const char *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (addArg(const char *, char, int, char, void *, int, const char *)) [6/10=60.0%] cmdLineParser.cpp(99,1)
  -> INLINE: (102,8) myOptionAlloc(const char *, char, int, char, void *, int, const char *) (isz = 78) (sz = 97)
    -> INLINE: (50,29) comdCalloc(size_t, size_t) (isz = 1) (sz = 10)
      -> EXTERN: memUtils.h:(27,11) calloc(size_t, size_t)
    -> INLINE: (51,14) dupString(const char *) (isz = 17) (sz = 24)
      -> INLINE: (40,15) comdCalloc(size_t, size_t) (isz = 1) (sz = 10)
        -> EXTERN: memUtils.h:(27,11) calloc(size_t, size_t)
      -> EXTERN: (40,27) strlen(const char *)
      -> EXTERN: (41,4) strcpy(char *, const char *)
    -> INLINE: (52,17) dupString(const char *) (isz = 17) (sz = 24)
      -> INLINE: (40,15) comdCalloc(size_t, size_t) (isz = 1) (sz = 10)
        -> EXTERN: memUtils.h:(27,11) calloc(size_t, size_t)
      -> EXTERN: (40,27) strlen(const char *)
      -> EXTERN: (41,4) strcpy(char *, const char *)
    -> EXTERN: (63,38) strlen(const char *)
    -> EXTERN: (63,65) strlen(const char *)
  -> INLINE: (107,11) lastOption(MyOption *) (isz = 15) (sz = 23)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]



Non-optimizable loops:


LOOP BEGIN at cmdLineParser.cpp(81,4) inlined into cmdLineParser.cpp(107,11)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

    Report from: Code generation optimizations [cg]

cmdLineParser.cpp(99,1):remark #34051: REGISTER ALLOCATION : [_Z6addArgPKccicPviS0_] cmdLineParser.cpp:99

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   13[ rax rdx rcx rbx rbp rsi rdi r8-r9 r12-r15]
        
    Routine temporaries
        Total         :      56
            Global    :      26
            Local     :      30
        Regenerable   :       7
        Spilled       :       9
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      72 bytes*
            Reads     :       9 [8.70e+00 ~ 8.7%]
            Writes    :       9 [9.00e+00 ~ 9.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: freeArgs()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (freeArgs()) [7/10=70.0%] cmdLineParser.cpp(115,1)
  -> INLINE: (118,16) myOptionFree(MyOption *) (isz = 17) (sz = 25)
    -> EXTERN: (72,18) free(void *)
    -> EXTERN: (73,15) free(void *)
    -> EXTERN: (74,4) free(void *)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]



Non-optimizable loops:


LOOP BEGIN at cmdLineParser.cpp(116,4)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

    Report from: Code generation optimizations [cg]

cmdLineParser.cpp(115,1):remark #34051: REGISTER ALLOCATION : [_Z8freeArgsv] cmdLineParser.cpp:115

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    3[ rdi r12-r13]
        
    Routine temporaries
        Total         :      13
            Global    :      10
            Local     :       3
        Regenerable   :       0
        Spilled       :       2
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      16 bytes*
            Reads     :       2 [1.87e+00 ~ 1.9%]
            Writes    :       2 [2.42e+00 ~ 2.5%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: printArgs()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (printArgs()) [8/10=80.0%] cmdLineParser.cpp(124,1)
  -> EXTERN: (128,4) fprintf(FILE *, const char *, ...)
  -> EXTERN: (130,4) sprintf(char *, const char *, ...)
  -> EXTERN: (135,7) fprintf(FILE *, const char *, ...)
  -> EXTERN: (136,7) fprintf(FILE *, const char *, ...)
  -> EXTERN: (140,4) fprintf(FILE *, const char *, ...)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]



Non-optimizable loops:


LOOP BEGIN at cmdLineParser.cpp(131,4)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

    Report from: Code generation optimizations [cg]

cmdLineParser.cpp(124,1):remark #34051: REGISTER ALLOCATION : [_Z9printArgsv] cmdLineParser.cpp:124

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   11[ rax rdx rcx rsi rdi r8-r9 r12-r15]
        
    Routine temporaries
        Total         :      45
            Global    :      12
            Local     :      33
        Regenerable   :      15
        Spilled       :       4
        
    Routine stack
        Variables     :    4096 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      32 bytes*
            Reads     :       4 [3.96e+00 ~ 2.6%]
            Writes    :       4 [3.96e+00 ~ 2.6%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: processArgs(int, char **)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (processArgs(int, char **)) [9/10=90.0%] cmdLineParser.cpp(145,1)
  -> INLINE: (159,18) comdCalloc(size_t, size_t) (isz = 1) (sz = 10)
    -> EXTERN: memUtils.h:(27,11) calloc(size_t, size_t)
  -> INLINE: (160,27) comdCalloc(size_t, size_t) (isz = 1) (sz = 10)
    -> EXTERN: memUtils.h:(27,11) calloc(size_t, size_t)
  -> EXTERN: (168,7) strcat(char *, const char *)
  -> EXTERN: (169,22) strcat(char *, const char *)
  -> EXTERN: (178,11) getopt_long(int, char *const *, const char *, const option *, int *)
  -> INLINE: (180,11) findOption(MyOption *, unsigned char) (isz = 16) (sz = 26)
  -> EXTERN: (183,10) fprintf(FILE *, const char *, ...)
  -> EXTERN: (199,16) sscanf(const char *, const char *, ...)
  -> EXTERN: (202,16) sscanf(const char *, const char *, ...)
  -> EXTERN: (205,16) sscanf(const char *, const char *, ...)
  -> EXTERN: (208,16) strncpy(char *, const char *, size_t)
  -> EXTERN: (212,16) sscanf(const char *, const char *, ...)
  -> EXTERN: (215,16) fprintf(FILE *, const char *, ...)
  -> EXTERN: (224,4) free(void *)
  -> EXTERN: (225,4) free(void *)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at cmdLineParser.cpp(161,4)
   remark #15382: vectorization support: call to function strcat(char *, const char *) cannot be vectorized   [ cmdLineParser.cpp(168,7) ]
   remark #15382: vectorization support: call to function strcat(char *, const char *) cannot be vectorized   [ cmdLineParser.cpp(169,22) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between call:strcat(char *, const char *) (168:7) and call:strcat(char *, const char *) (169:22)
   remark #15346: vector dependence: assumed OUTPUT dependence between call:strcat(char *, const char *) (169:22) and call:strcat(char *, const char *) (168:7)
LOOP END


Non-optimizable loops:


LOOP BEGIN at cmdLineParser.cpp(155,4)
   remark #15523: loop was not vectorized: loop control variable n was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at cmdLineParser.cpp(192,11)
   remark #15535: loop was not vectorized: loop contains switch statement. Consider using if-else statement.   [ cmdLineParser.cpp(196,10) ]

   LOOP BEGIN at cmdLineParser.cpp(87,4) inlined into cmdLineParser.cpp(180,11)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

cmdLineParser.cpp(145,1):remark #34051: REGISTER ALLOCATION : [_Z11processArgsiPPc] cmdLineParser.cpp:145

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rbp rsi rdi r8-r15]
        
    Routine temporaries
        Total         :     104
            Global    :      26
            Local     :      78
        Regenerable   :      25
        Spilled       :       8
        
    Routine stack
        Variables     :       4 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       1 [2.64e+00 ~ 1.1%]
        Spills        :      64 bytes*
            Reads     :      13 [9.37e+00 ~ 3.9%]
            Writes    :       8 [7.35e+00 ~ 3.1%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: lastOption(MyOption *)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (lastOption(MyOption *)) cmdLineParser.cpp(79,1)

===========================================================================
