Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C++ Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 17.0.2.174 Build 20170213

Compiler options: -I/opt/cray/pe/libsci/16.11.1/INTEL/15.0/mic_knl/include -I/opt/cray/pe/mpt/7.5.5/gni/mpich-intel/16.0/include -I/opt/cray/rca/2.1.8_g6cd9a1b-3.1/include -I/opt/cray/alps/6.3.4-2.21/include -I/opt/cray/xpmem/2.1.1_gf9c9084-2.38/include -I/opt/cray/gni-headers/5.0.11-2.2/include -I/opt/cray/pe/pmi/5.0.11/include -I/opt/cray/ugni/6.0.15-2.2/include -I/opt/cray/udreg/2.3.2-7.54/include -I/opt/cray/wlm_detect/1.2.1-3.10/include -I/opt/cray/krca/2.1.3_g923f58b-2.244/include -I/opt/cray-hss-devel/8.0.0/include -xmic-avx512 -static -D__CRAYXC -D__CRAY_MIC_KNL -D__CRAYXT_COMPUTE_LINUX_TARGET -std=c++11 -qopenmp -xmic-avx512 -qopt-report=5 -c -o CoMD.o -Wl,-T/opt/cray/pe/craype/2.5.9/bin/2.25.0.craype.ld

    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: false
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: main(int, char **)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (main(int, char **)) [1/15=6.7%] CoMD.cpp(87,1)
  -> EXTERN: (89,4) initParallel(int *, char ***)
  -> EXTERN: (90,4) profileStart(TimerHandle)
  -> INLINE: (91,4) initSubsystems() (isz = 0) (sz = 3)
    -> EXTERN: (245,4) yamlBegin()
  -> EXTERN: (92,4) timestampBarrier(const char *)
  -> EXTERN: (94,4) yamlAppInfo(FILE *)
  -> EXTERN: (95,4) yamlAppInfo(FILE *)
  -> EXTERN: (97,41) parseCommandLine(int, char **)
  -> EXTERN: (98,4) printCmdYaml(FILE *, Command *)
  -> EXTERN: (99,4) printCmdYaml(FILE *, Command *)
  -> (101,19) initSimulation(Command) (isz = 279) (sz = 286)
     [[ Inlining would exceed -inline-max-size value (286>253) <1>]]
  -> INLINE: (102,4) printSimulationDataYaml(FILE *, SimFlat *) (isz = 172) (sz = 180)
    -> EXTERN: (384,17) maxOccupancy(LinkCell *)
    -> EXTERN: (387,10) printRank()
    -> EXTERN: (390,4) fprintf(FILE *, const char *, ...)
    -> EXTERN: (391,4) fprintf(FILE *, const char *, ...)
    -> EXTERN: (393,4) fprintf(FILE *, const char *, ...)
    -> EXTERN: (395,4) fprintf(FILE *, const char *, ...)
    -> EXTERN: (397,4) printSeparator(FILE *)
    -> EXTERN: (398,4) fprintf(FILE *, const char *, ...)
    -> EXTERN: (399,4) fprintf(FILE *, const char *, ...)
    -> EXTERN: (401,4) fprintf(FILE *, const char *, ...)
    -> EXTERN: (404,4) fprintf(FILE *, const char *, ...)
    -> EXTERN: (406,4) fprintf(FILE *, const char *, ...)
    -> EXTERN: (410,4) fprintf(FILE *, const char *, ...)
    -> EXTERN: (412,4) printSeparator(FILE *)
    -> EXTERN: (413,4) fprintf(FILE *, const char *, ...)
    -> INDIRECT-: (414,4)  (s_669_V$9e.0.14.42->pot_V$36)->print_V$56
       [[ Unable to inline indirect callsite  <2>]]
    -> EXTERN: (416,4) fflush(FILE *)
  -> INLINE: (103,4) printSimulationDataYaml(FILE *, SimFlat *) (isz = 172) (sz = 180)
    -> EXTERN: (384,17) maxOccupancy(LinkCell *)
    -> EXTERN: (387,10) printRank()
    -> EXTERN: (390,4) fprintf(FILE *, const char *, ...)
    -> EXTERN: (391,4) fprintf(FILE *, const char *, ...)
    -> EXTERN: (393,4) fprintf(FILE *, const char *, ...)
    -> EXTERN: (395,4) fprintf(FILE *, const char *, ...)
    -> EXTERN: (397,4) printSeparator(FILE *)
    -> EXTERN: (398,4) fprintf(FILE *, const char *, ...)
    -> EXTERN: (399,4) fprintf(FILE *, const char *, ...)
    -> EXTERN: (401,4) fprintf(FILE *, const char *, ...)
    -> EXTERN: (404,4) fprintf(FILE *, const char *, ...)
    -> EXTERN: (406,4) fprintf(FILE *, const char *, ...)
    -> EXTERN: (410,4) fprintf(FILE *, const char *, ...)
    -> EXTERN: (412,4) printSeparator(FILE *)
    -> EXTERN: (413,4) fprintf(FILE *, const char *, ...)
    -> INDIRECT-: (414,4)  (s_669_V$9e.0.14.41->pot_V$36)->print_V$56
       [[ Unable to inline indirect callsite  <2>]]
    -> EXTERN: (416,4) fflush(FILE *)
  -> INLINE: (105,25) initValidate(SimFlat *) (isz = 45) (sz = 52)
    -> INLINE: (283,4) sumAtoms(SimFlat *) (isz = 50) (sz = 55)
      -> EXTERN: (337,4) profileStart(TimerHandle)
      -> EXTERN: (338,4) addIntParallel(int *, int *, int)
      -> EXTERN: (339,4) profileStop(TimerHandle)
    -> INLINE: (284,32) comdMalloc(size_t) (isz = 2) (sz = 9)
      -> EXTERN: memUtils.h:(19,9) _mm_malloc(unsigned long long, unsigned long long)
    -> EXTERN: (288,8) printRank()
    -> EXTERN: (290,7) fprintf(FILE *, const char *, ...)
    -> EXTERN: (291,7) printSeparator(FILE *)
    -> EXTERN: (292,7) fprintf(FILE *, const char *, ...)
    -> EXTERN: (294,7) fprintf(FILE *, const char *, ...)
  -> EXTERN: (106,4) timestampBarrier(const char *)
  -> EXTERN: (108,4) timestampBarrier(const char *)
  -> EXTERN: (114,4) profileStart(TimerHandle)
  -> EXTERN: (117,7) profileStart(TimerHandle)
  -> INLINE: (118,7) sumAtoms(SimFlat *) (isz = 50) (sz = 55)
    -> EXTERN: (337,4) profileStart(TimerHandle)
    -> EXTERN: (338,4) addIntParallel(int *, int *, int)
    -> EXTERN: (339,4) profileStop(TimerHandle)
  -> EXTERN: (119,7) profileStop(TimerHandle)
  -> INLINE: (121,7) printThings(SimFlat *, int, double) (isz = 68) (sz = 78)
    -> EXTERN: (355,10) printRank()
    -> EXTERN: (361,7) fprintf(FILE *, const char *, ...)
    -> EXTERN: (364,7) fflush(FILE *)
    -> EXTERN: (375,4) fprintf(FILE *, const char *, ...)
  -> EXTERN: (121,31) getElapsedTime(TimerHandle)
  -> EXTERN: (123,7) profileStart(TimerHandle)
  -> EXTERN: (124,7) timestep(SimFlat *, int, real_t)
  -> EXTERN: (125,7) profileStop(TimerHandle)
  -> EXTERN: (129,4) profileStop(TimerHandle)
  -> INLINE: (131,4) sumAtoms(SimFlat *) (isz = 50) (sz = 55)
    -> EXTERN: (337,4) profileStart(TimerHandle)
    -> EXTERN: (338,4) addIntParallel(int *, int *, int)
    -> EXTERN: (339,4) profileStop(TimerHandle)
  -> INLINE: (132,4) printThings(SimFlat *, int, double) (isz = 68) (sz = 78)
    -> EXTERN: (355,10) printRank()
    -> EXTERN: (361,7) fprintf(FILE *, const char *, ...)
    -> EXTERN: (364,7) fflush(FILE *)
    -> EXTERN: (375,4) fprintf(FILE *, const char *, ...)
  -> EXTERN: (132,28) getElapsedTime(TimerHandle)
  -> EXTERN: (133,4) timestampBarrier(const char *)
  -> INLINE: (136,4) validateResult(const Validate *, SimFlat *) (isz = 77) (sz = 84)
    -> EXTERN: (301,8) printRank()
    -> EXTERN: (307,7) fprintf(FILE *, const char *, ...)
    -> EXTERN: (308,7) fprintf(FILE *, const char *, ...)
    -> EXTERN: (309,7) fprintf(FILE *, const char *, ...)
    -> EXTERN: (311,7) fprintf(FILE *, const char *, ...)
    -> EXTERN: (312,7) fprintf(FILE *, const char *, ...)
    -> EXTERN: (313,7) fprintf(FILE *, const char *, ...)
    -> EXTERN: (316,10) fprintf(FILE *, const char *, ...)
    -> EXTERN: (321,10) fprintf(FILE *, const char *, ...)
    -> EXTERN: (322,10) fprintf(FILE *, const char *, ...)
    -> EXTERN: (323,10) fprintf(FILE *, const char *, ...)
  -> EXTERN: (137,4) profileStop(TimerHandle)
  -> EXTERN: (139,4) printPerformanceResults(int, int)
  -> EXTERN: (140,4) printPerformanceResultsYaml(FILE *)
  -> INLINE: (142,4) destroySimulation(SimFlat **) (isz = 33) (sz = 40)
    -> INDIRECT-: (227,14)  pot.645_V$5a.0.5.28->destroy_V$57
       [[ Unable to inline indirect callsite  <2>]]
    -> EXTERN: (228,4) destroyLinkCells(LinkCell **)
    -> EXTERN: (229,4) destroyAtoms(AtomsSt *)
    -> EXTERN: (230,4) destroyHaloExchange(HaloExchange **)
    -> INLINE: (231,4) comdFree(void *) (isz = 0) (sz = 5)
      -> EXTERN: memUtils.h:(38,2) _mm_free(void *)
    -> INLINE: (232,4) comdFree(void *) (isz = 0) (sz = 5)
      -> EXTERN: memUtils.h:(38,2) _mm_free(void *)
    -> INLINE: (233,4) comdFree(void *) (isz = 0) (sz = 5)
      -> EXTERN: memUtils.h:(38,2) _mm_free(void *)
  -> INLINE: (143,4) comdFree(void *) (isz = 0) (sz = 5)
    -> EXTERN: memUtils.h:(38,2) _mm_free(void *)
  -> INLINE: (144,4) finalizeSubsystems() (isz = 0) (sz = 3)
    -> EXTERN: (253,4) yamlEnd()
  -> EXTERN: (146,4) timestampBarrier(const char *)
  -> EXTERN: (147,4) destroyParallel()


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at CoMD.cpp(332,4) inlined into CoMD.cpp(105,25)
<Peeled loop for vectorization, Multiversioned v1>
   remark #15389: vectorization support: reference sim->boxes->nAtoms[i] has unaligned access   [ CoMD.cpp(334,27) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: peel loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 3.538
   remark #25015: Estimate of max trip count of loop=15
LOOP END

LOOP BEGIN at CoMD.cpp(332,4) inlined into CoMD.cpp(105,25)
<Multiversioned v1>
   remark #25228: Loop multiversioned for Data Dependence
   remark #25084: Preprocess Loopnests: Moving Out Store    [ CoMD.cpp(334,7) ]
   remark #15389: vectorization support: reference sim->boxes->nAtoms[i] has unaligned access   [ CoMD.cpp(334,27) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 16
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 4.100
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 0.310 
   remark #15478: estimated potential speedup: 5.960 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at CoMD.cpp(332,4) inlined into CoMD.cpp(105,25)
<Remainder loop for vectorization, Multiversioned v1>
   remark #15389: vectorization support: reference sim->boxes->nAtoms[i] has unaligned access   [ CoMD.cpp(334,27) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 3.538
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at CoMD.cpp(332,4) inlined into CoMD.cpp(105,25)
<Multiversioned v2>
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at CoMD.cpp(332,4) inlined into CoMD.cpp(105,25)
<Remainder, Multiversioned v2>
LOOP END

LOOP BEGIN at CoMD.cpp(332,4) inlined into CoMD.cpp(118,7)
<Peeled loop for vectorization, Multiversioned v1>
   remark #15389: vectorization support: reference sim->boxes->nAtoms[i] has unaligned access   [ CoMD.cpp(334,27) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: peel loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 3.538
   remark #25015: Estimate of max trip count of loop=15
LOOP END

LOOP BEGIN at CoMD.cpp(332,4) inlined into CoMD.cpp(118,7)
<Multiversioned v1>
   remark #25228: Loop multiversioned for Data Dependence
   remark #25084: Preprocess Loopnests: Moving Out Store    [ CoMD.cpp(334,7) ]
   remark #15389: vectorization support: reference sim->boxes->nAtoms[i] has unaligned access   [ CoMD.cpp(334,27) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 16
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 4.100
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 0.310 
   remark #15478: estimated potential speedup: 5.960 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at CoMD.cpp(332,4) inlined into CoMD.cpp(118,7)
<Remainder loop for vectorization, Multiversioned v1>
   remark #15389: vectorization support: reference sim->boxes->nAtoms[i] has unaligned access   [ CoMD.cpp(334,27) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 3.538
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at CoMD.cpp(332,4) inlined into CoMD.cpp(118,7)
<Multiversioned v2>
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at CoMD.cpp(332,4) inlined into CoMD.cpp(118,7)
<Remainder, Multiversioned v2>
LOOP END

LOOP BEGIN at CoMD.cpp(332,4) inlined into CoMD.cpp(131,4)
<Peeled loop for vectorization, Multiversioned v1>
   remark #15389: vectorization support: reference sim->boxes->nAtoms[i] has unaligned access   [ CoMD.cpp(334,27) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: peel loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 3.538
   remark #25015: Estimate of max trip count of loop=15
LOOP END

LOOP BEGIN at CoMD.cpp(332,4) inlined into CoMD.cpp(131,4)
<Multiversioned v1>
   remark #25228: Loop multiversioned for Data Dependence
   remark #25084: Preprocess Loopnests: Moving Out Store    [ CoMD.cpp(334,7) ]
   remark #15389: vectorization support: reference sim->boxes->nAtoms[i] has unaligned access   [ CoMD.cpp(334,27) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 16
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 4.100
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 0.310 
   remark #15478: estimated potential speedup: 5.960 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at CoMD.cpp(332,4) inlined into CoMD.cpp(131,4)
<Remainder loop for vectorization, Multiversioned v1>
   remark #15389: vectorization support: reference sim->boxes->nAtoms[i] has unaligned access   [ CoMD.cpp(334,27) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 3.538
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at CoMD.cpp(332,4) inlined into CoMD.cpp(131,4)
<Multiversioned v2>
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at CoMD.cpp(332,4) inlined into CoMD.cpp(131,4)
<Remainder, Multiversioned v2>
LOOP END


Non-optimizable loops:


LOOP BEGIN at CoMD.cpp(115,4)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

CoMD.cpp(101,19):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
CoMD.cpp(101,19):remark #34026: call to memcpy implemented as a call to optimized library version
CoMD.cpp(87,1):remark #34051: REGISTER ALLOCATION : [main] CoMD.cpp:87

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   47[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm31 k1]
        
    Routine temporaries
        Total         :     853
            Global    :     111
            Local     :     742
        Regenerable   :     164
        Spilled       :       9
        
    Routine stack
        Variables     :    3168 bytes*
            Reads     :       4 [2.00e+00 ~ 0.1%]
            Writes    :       5 [9.02e-01 ~ 0.1%]
        Spills        :      72 bytes*
            Reads     :      11 [1.09e+01 ~ 0.8%]
            Writes    :       9 [7.12e+00 ~ 0.5%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: comdMalloc(size_t)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (comdMalloc(size_t)) memUtils.h(17,1)

===========================================================================

Begin optimization report for: comdFree(void *)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (comdFree(void *)) memUtils.h(36,1)

===========================================================================

Begin optimization report for: destroySimulation(SimFlat **)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (destroySimulation(SimFlat **)) CoMD.cpp(220,1)

===========================================================================

Begin optimization report for: finalizeSubsystems()

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (finalizeSubsystems()) CoMD.cpp(249,1)

===========================================================================

Begin optimization report for: validateResult(const Validate *, SimFlat *)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (validateResult(const Validate *, SimFlat *)) CoMD.cpp(300,1)

===========================================================================

Begin optimization report for: printThings(SimFlat *, int, double)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (printThings(SimFlat *, int, double)) CoMD.cpp(347,1)

===========================================================================

Begin optimization report for: printSimulationDataYaml(FILE *, SimFlat *)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (printSimulationDataYaml(FILE *, SimFlat *)) CoMD.cpp(382,1)

===========================================================================

Begin optimization report for: sanityChecks(Command, double, double, char *)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (sanityChecks(Command, double, double, char *)) CoMD.cpp(421,1)

===========================================================================

Begin optimization report for: sumAtoms(SimFlat *)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (sumAtoms(SimFlat *)) CoMD.cpp(329,1)

===========================================================================

Begin optimization report for: initValidate(SimFlat *)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (initValidate(SimFlat *)) CoMD.cpp(282,1)

===========================================================================

Begin optimization report for: initSpecies(BasePotential *)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (initSpecies(BasePotential *)) CoMD.cpp(271,1)

===========================================================================

Begin optimization report for: initPotential(int, const char *, const char *, const char *)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (initPotential(int, const char *, const char *, const char *)) CoMD.cpp(259,1)

===========================================================================

Begin optimization report for: initSubsystems()

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (initSubsystems()) CoMD.cpp(240,1)

===========================================================================

Begin optimization report for: initSimulation(Command)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (initSimulation(Command)) [15/15=100.0%] CoMD.cpp(164,1)
  -> INLINE: (165,30) comdMalloc(size_t) (isz = 2) (sz = 9)
    -> EXTERN: memUtils.h:(19,9) _mm_malloc(unsigned long long, unsigned long long)
  -> INLINE: (176,15) initPotential(int, const char *, const char *, const char *) (isz = 18) (sz = 31)
    -> EXTERN: (263,13) initEamPot(const char *, const char *, const char *)
    -> EXTERN: (265,13) initLjPot()
    -> EXTERN: (266,4) __assert_fail(const char *, const char *, unsigned int, const char *)
  -> INLINE: (182,4) sanityChecks(Command, double, double, char *) (isz = 100) (sz = 111)
    -> EXTERN: (426,18) getNRanks()
    -> EXTERN: (429,11) printRank()
    -> EXTERN: (430,10) fprintf(FILE *, const char *, ...)
    -> EXTERN: (445,11) printRank()
    -> EXTERN: (446,10) fprintf(FILE *, const char *, ...)
    -> EXTERN: (453,8) strcasecmp(const char *, const char *)
    -> EXTERN: (456,12) printRank()
    -> EXTERN: (457,10) fprintf(FILE *, const char *, ...)
    -> EXTERN: (462,4) bcastParallel(void *, int, int)
    -> EXTERN: (465,4) __assert_fail(const char *, const char *, unsigned int, const char *)
    -> EXTERN: (468,7) exit(int)
  -> INLINE: (184,19) initSpecies(BasePotential *) (isz = 19) (sz = 26)
    -> INLINE: (272,42) comdMalloc(size_t) (isz = 2) (sz = 9)
      -> EXTERN: memUtils.h:(19,9) _mm_malloc(unsigned long long, unsigned long long)
    -> EXTERN: (274,4) strcpy(char *, const char *)
  -> EXTERN: (191,18) initDecomposition(int, int, int, real_t *)
  -> EXTERN: (194,17) initLinkCells(const DomainSt *, real_t)
  -> EXTERN: (195,17) initAtoms(LinkCellSt *)
  -> EXTERN: (198,4) createFccLattice(int, int, int, real_t, SimFlatSt *)
  -> EXTERN: (199,4) setTemperature(SimFlatSt *, real_t)
  -> EXTERN: (200,4) randomDisplacements(SimFlatSt *, real_t)
  -> EXTERN: (202,24) initAtomHaloExchange(DomainSt *, LinkCellSt *)
  -> EXTERN: (205,4) profileStart(TimerHandle)
  -> EXTERN: (206,4) redistributeAtoms(SimFlatSt *)
  -> EXTERN: (207,4) profileStop(TimerHandle)
  -> EXTERN: (209,4) profileStart(TimerHandle)
  -> EXTERN: (210,4) computeForce(SimFlat *)
  -> EXTERN: (211,4) profileStop(TimerHandle)
  -> EXTERN: (213,4) kineticEnergy(SimFlat *)


    Report from: Code generation optimizations [cg]

CoMD.cpp(182,4):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
CoMD.cpp(182,4):remark #34026: call to memcpy implemented as a call to optimized library version
CoMD.cpp(164,1):remark #34051: REGISTER ALLOCATION : [_ZN29_INTERNAL_8_CoMD_cpp_8cdcf89d14initSimulationE9CommandSt] CoMD.cpp:164

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   26[ rax rdx rcx rbx rsi rdi r8-r9 r12-r14 zmm0-zmm5 zmm16-zmm23 k0]
        
    Routine temporaries
        Total         :     167
            Global    :      42
            Local     :     125
        Regenerable   :      51
        Spilled       :       9
        
    Routine stack
        Variables     :    3172 bytes*
            Reads     :      10 [1.00e+01 ~ 5.3%]
            Writes    :       4 [4.00e+00 ~ 2.1%]
        Spills        :      72 bytes*
            Reads     :      16 [1.40e+01 ~ 7.4%]
            Writes    :      10 [9.11e+00 ~ 4.8%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

    Report from: Interprocedural optimizations [ipo]

INLINING FOOTNOTES:

<1> The function is larger than the inliner would normally inline.  Use the
    option -inline-max-size to increase the size of any function that would
    normally be inlined, add "inline __attribute__((always_inline))" to the
    declaration of the called function, or add "#pragma forceinline" before
    the call site.

<2> The indirectly called function must be resolved to its targets before it 
can be inlined.  Consider compiling with -ipo or -prof-gen followed by 
-prof-use.

